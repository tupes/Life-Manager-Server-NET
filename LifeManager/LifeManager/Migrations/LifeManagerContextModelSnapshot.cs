// <auto-generated />
using System;
using LifeManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LifeManager.Migrations
{
    [DbContext(typeof(LifeManagerContext))]
    partial class LifeManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LifeManager.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("LifeManager.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployerId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("LifeManager.Models.JobPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId");

                    b.Property<int>("JobSiteId");

                    b.Property<string>("Text");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSiteId");

                    b.ToTable("JobPosting");
                });

            modelBuilder.Entity("LifeManager.Models.JobSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobSite");
                });

            modelBuilder.Entity("LifeManager.Models.Responsibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("JobId");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Responsibility");
                });

            modelBuilder.Entity("LifeManager.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("JobId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("LifeManager.Models.Job", b =>
                {
                    b.HasOne("LifeManager.Models.Employer")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LifeManager.Models.JobPosting", b =>
                {
                    b.HasOne("LifeManager.Models.Job")
                        .WithMany("JobPostings")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LifeManager.Models.JobSite")
                        .WithMany("JobPostings")
                        .HasForeignKey("JobSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LifeManager.Models.Responsibility", b =>
                {
                    b.HasOne("LifeManager.Models.Job")
                        .WithMany("Responsibilities")
                        .HasForeignKey("JobId");
                });

            modelBuilder.Entity("LifeManager.Models.Skill", b =>
                {
                    b.HasOne("LifeManager.Models.Job")
                        .WithMany("Skills")
                        .HasForeignKey("JobId");
                });
#pragma warning restore 612, 618
        }
    }
}
